plugins {
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$springBootManagmentPluginVersion"
    id 'java'
    id "io.freefair.lombok" version "5.3.0"
}

group = 'io.amtech'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "io.springfox:springfox-boot-starter:$springFoxVersion"
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
}

project.ext.set("dbContainerName", "projectflow-db")
project.ext.set("dbMigrationContainerName", "projectflow-db-migration")

task runDockerDb(type: Exec) {
    doFirst {
        stopMigrationContainers()
    }
    commandLine 'docker', 'run', '--rm',
        '--name', project.dbContainerName,
        '-e', 'POSTGRES_USER=test',
        '-e', 'POSTGRES_PASSWORD=test',
        '-e', 'POSTGRES_DB=projectflow',
        '-p', '15432:5432',
        '-d', 'postgres:13.3'
}

task testDbMigration(type: Exec, dependsOn: [runDockerDb]) {
    commandLine 'docker', 'run', '--rm',
        '--name', project.dbMigrationContainerName,
        '--link', "$project.dbContainerName:db_host",
        '-v', "$projectDir/src/main/resources/db/migration:/flyway/sql",
        'boxfuse/flyway:6',
        "-url=jdbc:postgresql://db_host:5432/projectflow",
        "-user=test",
        '-password=test',
        '-connectRetries=30',
        '-schemas=pf',
        'migrate'
}

def stopMigrationContainers() {
    try {
        [project.dbMigrationContainerName, project.dbContainerName].each {
            print "Try stop runned docker containers: ${"docker stop $it".execute().text}"
        }

    } catch (Exception e) {
        println e.message
    }
}

